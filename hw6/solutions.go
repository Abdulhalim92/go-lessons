package main

import "fmt"

// Учет накопительных счетов с ежемесячным пополнением
// • Начальный баланс накопительного счета равен 100000 рублей.
// • Реализуйте функции для пополнения счета каждый месяц на фиксированную сумму.
// • Выводите баланс после каждого пополнения.
// • Если баланс становится больше 500000 рублей, выведите сообщение "Достигнут лимит накоплений".
func monthlyDeposit(balancePtr *float64, depositAmount float64) {
	*balancePtr += depositAmount
	fmt.Printf("Текущий баланс: %.2f RUB\n", *balancePtr)
	if *balancePtr > 500000 {
		fmt.Println("Достигнут лимит накоплений")
	}
}

// Рассчет выплат по кредиту с фиксированной ставкой
// • Начальная сумма кредита равна 3000000 рублей.
// • Реализуйте функции для ежемесячного расчета выплат по кредиту с фиксированной процентной ставкой 10%.
// • Выводите остаток по кредиту после каждой выплаты.
// • Если остаток по кредиту становится меньше 500000 рублей, выведите сообщение "Почти погашен кредит".
func calculateMonthlyPayment(principal float64, annualRate float64, numPayments int) float64 {
	monthlyRate := annualRate / 12 / 100
	return principal * monthlyRate / (1 - (1/(1+monthlyRate))/float64(numPayments))
}

func makeMonthlyPayment(balancePtr *float64, payment float64) {
	*balancePtr -= payment
	if *balancePtr < 500000 {
		fmt.Println("Почти погашен кредит")
	} else {
		fmt.Printf("Остаток по кредиту: %.2f RUB\n", *balancePtr)
	}
}

// Учет операций по банковским переводам с лимитом суммы
// • Начальный баланс счета равен 500000 рублей.
// • Реализуйте функции для выполнения банковских переводов.
// • Если сумма перевода превышает 100000 рублей, выведите сообщение "Сумма перевода превышает лимит".
// • Выводите остаток на счете после каждого перевода.
func transfer(balancePtr *float64, amount float64) {
	if amount > 100000 {
		fmt.Println("Сумма перевода превышает лимит")
	} else {
		*balancePtr -= amount
		fmt.Printf("Остаток на счете: %.2f RUB\n", *balancePtr)
	}
}

//	Учет процентов по вкладам с ежемесячной капитализацией
//
// • Начальный вклад равен 100000 рублей.
// • Реализуйте функции для ежемесячного начисления процентов по ставке 5% годовых.
// • Капитализируйте проценты ежемесячно и выводите сумму вклада после каждого начисления.
// • Если сумма вклада превышает 150000 рублей, выведите сообщение "Достигнут лимит вклада".
func applyMonthlyInterest(balancePtr *float64, annualRate float64) {
	monthlyRate := annualRate / 12 / 100
	*balancePtr += *balancePtr * monthlyRate
	if *balancePtr > 150000 {
		fmt.Println("Достигнут лимит вклада")
	} else {
		fmt.Printf("Сумма вклада: %.2f RUB\n", *balancePtr)
	}
}

//	Конвертация валют с ежемесячным обновлением курса
//
// • Начальный курс доллара к рублю равен 74.5.
// • Реализуйте функции для ежемесячного обновления курса валюты.
// • Реализуйте функцию для конвертации заданной суммы в рубли по текущему курсу.
// • Если курс становится ниже 70, выведите сообщение "Курс слишком низкий".
func updateExchangeRate(ratePtr *float64, newRate float64) {
	*ratePtr = newRate
	fmt.Printf("Текущий курс: %.2f RUB/USD\n", *ratePtr)
	if *ratePtr < 70 {
		fmt.Println("Курс слишком низкий")
	}
}

func convertToRub(amountPtr *float64, rate float64) {
	*amountPtr *= rate
}

// Начисление сложных процентов на вклад
// • Начальная сумма вклада равна 200000 рублей.
// • Реализуйте функции для начисления сложных процентов каждый месяц по ставке 5%.
// • Выводите баланс после каждого начисления.
// • Если баланс становится больше 300000 рублей, выведите сообщение "Достигнут лимит начислений"
func addMonthlyInterest(balancePtr *float64, interestRate float64) {
	*balancePtr *= (1 + interestRate/100)
	fmt.Printf("Текущий баланс: %.2f RUB\n", *balancePtr)
	if *balancePtr > 300000 {
		fmt.Println("Достигнут лимит начислений")
	}
}

// Учет ежедневных расходов с лимитом
// • Начальный лимит расходов в день равен 5000 рублей.
// • Реализуйте функции для добавления расходов в течение дня.
// • Выводите текущую сумму расходов после каждого добавления.
// • Если сумма расходов превышает лимит, выведите сообщение "Превышен дневной лимит".
func addDailyExpense(expensesPtr *float64, expenseAmount float64) {
	*expensesPtr += expenseAmount
	fmt.Printf("Текущие расходы: %.2f RUB\n", *expensesPtr)
	if *expensesPtr > 5000 {
		fmt.Println("Превышен дневной лимит")
	}
}

//	Начисление процентов на депозит с ежегодной проверкой
//
// • Начальная сумма депозита равна 500000 рублей.
// • Реализуйте функции для начисления процентов каждый год по ставке 6%.
// • Выводите баланс после каждого начисления.
// • Если баланс становится больше 700000 рублей, выведите сообщение "Достигнут лимит начислений".
func addYearlyInterest(balancePtr *float64, interestRate float64) {
	*balancePtr *= (1 + interestRate/100)
	fmt.Printf("Текущий баланс: %.2f RUB\n", *balancePtr)
	if *balancePtr > 700000 {
		fmt.Println("Достигнут лимит начислений")
	}
}

//	Учет транзакций с комиссией
//
// • Начальный баланс счета равен 100000 рублей.
// • Реализуйте функции для добавления транзакций с комиссией 1%.
// • Выводите баланс после каждой транзакции.
// • Если баланс становится меньше 50000 рублей, выведите сообщение "Баланс ниже допустимого уровня".
func addTransactionWithCommission(balancePtr *float64, transactionAmount float64, commissionRate float64) {
	commission := transactionAmount * commissionRate / 100
	*balancePtr -= (transactionAmount + commission)
	fmt.Printf("Текущий баланс: %.2f RUB\n", *balancePtr)
	if *balancePtr < 50000 {
		fmt.Println("Баланс ниже допустимого уровня")
	}
}

//	Учет инвестиций с ежегодным пересчетом доходов
//
// • Начальная сумма инвестиций равна 300000 рублей.
// • Реализуйте функции для начисления дохода каждый год по ставке 7%.
// • Выводите баланс после каждого начисления.
// • Если баланс становится больше 400000 рублей, выведите сообщение "Достигнут лимит дохода".
func addYearlyIncome(balancePtr *float64, incomeRate float64) {
	*balancePtr *= (1 + incomeRate/100)
	fmt.Printf("Текущий баланс: %.2f RUB\n", *balancePtr)
	if *balancePtr > 400000 {
		fmt.Println("Достигнут лимит дохода")
	}
}

// Пополнение счета
// • Начальный баланс счета равен 10000 рублей.
// • Реализуйте функцию для пополнения счета на заданную сумму.
// • Выводите новый баланс после каждого пополнения.
func depositBalance(balancePtr *float64, amount float64) {
	*balancePtr += amount
	fmt.Printf("Новый баланс: %.2f RUB\n", *balancePtr)
}

//	Снятие средств со счета
//
// • Начальный баланс счета равен 20000 рублей.
// • Реализуйте функцию для снятия средств со счета на заданную сумму.
// • Если баланс становится меньше 0, выведите сообщение "Недостаточно средств".
func withdraw(balancePtr *float64, amount float64) {
	*balancePtr -= amount
	if *balancePtr < 0 {
		fmt.Println("Недостаточно средств")
	} else {
		fmt.Printf("Новый баланс: %.2f RUB\n", *balancePtr)
	}
}

// Проверка баланса
// • Начальный баланс счета равен 15000 рублей.
// • Реализуйте функцию для проверки баланса.
// • Если баланс меньше 5000 рублей, выведите сообщение "Баланс низкий".
func checkBalance(balancePtr *float64) {
	if *balancePtr < 5000 {
		fmt.Println("Баланс низкий")
	} else {
		fmt.Printf("Текущий баланс: %.2f RUB\n", *balancePtr)
	}
}

// Начисление процентов
// • Начальный баланс счета равен 50000 рублей.
// • Реализуйте функцию для начисления процентов на заданный баланс по ставке 2%.
// • Выводите новый баланс после начисления процентов.
func applyInterest(balancePtr *float64, interestRate float64) {
	*balancePtr *= (1 + interestRate/100)
	fmt.Printf("Новый баланс: %.2f RUB\n", *balancePtr)
}

//	Перевод средств между счетами
//
// • Начальный баланс первого счета равен 30000 рублей.
// • Начальный баланс второго счета равен 15000 рублей.
// • Реализуйте функцию для перевода средств с первого счета на второй на заданную сумму.
// • Выводите балансы обоих счетов после перевода.
func transferFunds(balance1Ptr, balance2Ptr *float64, amount float64) {
	if *balance1Ptr >= amount {
		*balance1Ptr -= amount
		*balance2Ptr += amount
		fmt.Printf("Баланс первого счета: %.2f RUB\n", *balance1Ptr)
		fmt.Printf("Баланс второго счета: %.2f RUB\n", *balance2Ptr)
	} else {
		fmt.Println("Недостаточно средств для перевода")
	}
}

// Ограничение на максимальную сумму снятия
// • Начальный баланс счета равен 40000 рублей.
// • Реализуйте функцию для снятия средств с максимальной суммой снятия 10000 рублей.
// • Если снимаемая сумма превышает этот лимит, выведите сообщение "Превышен лимит снятия".
func withdrawWithLimit(balancePtr *float64, amount, limit float64) {
	if amount > limit {
		fmt.Println("Превышен лимит снятия")
	} else {
		*balancePtr -= amount
		fmt.Printf("Новый баланс: %.2f RUB\n", *balancePtr)
	}
}
